Algorithms with their Big O's


1.Bubble Sort :- This is an algorithm to sort an array and it is simplest of all the algorithms.
Algorithm :- 
function swap(arr, first_Index, second_Index){
    var temp = arr[first_Index];
    arr[first_Index] = arr[second_Index];
    arr[second_Index] = temp;
}

function bubble_Sort(arr){

    var len = arr.length,
        i, j, stop;

    for (i=0; i < len; i++){
        for (j=0, stop=len-i; j < stop; j++){
            if (arr[j] > arr[j+1]){
                swap(arr, j, j+1);
            }
        }
    }

    return arr;
}
console.log(bubble_Sort([3, 0, 2, 5, -1, 4, 1]));
Complexity : - This takes time O(n^2) when array is not at all sorted and it takes O(n) when array is Fully sorted since it just loops one time when array is sorted.


2.Linear Search :- This is an algorithm to search an element form an array and it is simplest of all the searching algorithms.

Algorithm :-

function linearSearch(arr , elementToSearch){
	for(let i=0 ; i<=arr.length ; i++){
		if(arr[i]===elementToSearch){
			console.log('Element', arr[i] . 'is found at the location' , i);
		}
		else{
			console.log('Element you are looking for is not in this array');
		}
	}
}

let arr=[1,2,3,5,6,7,4];
linearSearch(arr, 6);

Complexity :- This takes time O(n) if the element is at the end of the array i.e in worst case.



3.Factorial Algorithm

Algorithm :-

function factorial(num) {
    fact = 1, i;    
   for(let i=1; i<=num; i++)
	{
      		fact = fact * i; 
   		console.log('The factorial of' , num ,'is' , fact);
	}
}	
factorial(20);

Complexity :- The complexity if this algo will be O(n);



4.Quick Sort Algorithm

Algorithm :-
const quickSort = (
  unsortedArray,
  comparator = defaultComparator
) => {

  // Create a sortable array to return.
  const sortedArray = [...unsortedArray];

  // Recursively sort sub-arrays.
  const recursiveSort = (start, end) => {

    // If this sub-array is empty, it's sorted.
    if (end - start < 1) {
      return;
    }
    const pivotValue = sortedArray[end];
    let splitIndex = start;
  };

  // Sort the entire array.
  recursiveSort(0, unsortedArray.length - 1);
  return sortedArray;

Complexity :- The worst case complexity of this algorithm is O(n^2).


5.Merge Sort Algorithm

Algorithm :-

var unsortedArr = [340, 1, 3, 3, 76, 23, 4, 12, 122, 7642, 646];
function merge(leftArr, rightArr) {
var sortedArr = [];
  while (leftArr.length && rightArr.length) {
    if (leftArr[0] <= rightArr[0]) {
      sortedArr.push(leftArr[0]);
      leftArr = leftArr.slice(1)
   } else {
      sortedArr.push(rightArr[0]);
      rightArr = rightArr.slice(1)
     }
   }
  while (leftArr.length)
    sortedArr.push(leftArr.shift());
  while (rightArr.length)
    sortedArr.push(rightArr.shift());
  return sortedArr;
}
function mergesort(arr) {
  if (arr.length < 2) {
    return arr; }
  else {
    var midpoint = parseInt(arr.length / 2);
    var leftArr   = arr.slice(0, midpoint);
    var rightArr  = arr.slice(midpoint, arr.length);
    return merge(mergesort(leftArr), mergesort(rightArr));
  }
}
console.log('This should be the sorted array!')
console.log(mergesort(unsortedArr));

complexity :-The complexity of this algorithm will be O(nlogn).




